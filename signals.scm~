(define (accumulate op initial sequence) 
  (if (null? sequence) 
      initial 
      (op (car sequence) 
	  (accumulate op initial (cdr sequence))))) 

 (define (accumulate-n op init sequence) 
   (define nil '()) 
   (if (null? (car sequence)) 
       nil 
       (cons (accumulate op init (map car sequence)) 
             (accumulate-n op init (map cdr sequence))))) 


(define (dot-product v w) 
  (accumulate + 0 (map * v w)))

(dot-product (list 1 2 3) (list 4 5 6)) 

(define (matrix-*-vector m v) 
  (map (lambda (m-row) (dot-product m-row v))
       m))

(define matrix (list (list 1 2 3 4) (list 5 6 7 8) (list 9 10 11 12))) 

(matrix-*-vector matrix (list 2 3 4 5)) 

(define nil '())

(define (transpose mat) 
  (accumulate-n cons   
		nil 
		mat))

(transpose matrix)









