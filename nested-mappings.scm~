(define (flatmap proc seq) 
  (accumulate append nil (map proc seq)))

(define (prime-sum? pair) 
  (prime? (+ (car pair) (cadr pair))))

(define (make-pair-sum pair) (list (car pair) (cadr pair) (+ (car pair) (cadr pair))))

(define (prime-sum-pairs n) 
  (map make-pair-sum (filter prime-sum? 
			     (flatmap (lambda (i) (map (lambda (j) (list i j)) 
						       (enumerate-interval 1 (- i 1)))) 
				      (enumerate-interval 1 n)))))

(prime-sum-pairs 6)

(define (permutations s) 
  (if (null? s) ; empty set? 
      (list nil) ; sequence containing empty set 
      (flatmap (lambda (x) (map (lambda (p) (cons x p)) 
				(permutations (remove x s)))) 
	       s)))

(define (remove item sequence) (filter (lambda (x) (not (= x item))) sequence))

(permutations (list 1 2 3))

(define (sum-triple? triple n)
  (= (+ (car triple) (cadr triple) (caddr triple))
     n))

(define (distinct? triple)
  (not (or (= (car triple) (cadr triple))
	   (= (car triple) (caddr triple))
	   (= (cadr triple) (caddr triple)))))

(define (triple-list n)
  (flatmap 
   (lambda (j)
     (map (lambda (k)
	    (list j k))
	  (enumerate-interval 1 n)))
   (enumerate-interval 1 n)))

(triple-list 3)

(define (sum-triple-equal-s n s)
  (filter (lambda (triple) (= (+ (car triple) (cadr triple) (caddr triple))
			      n))
	  (filter distinct?
		  (triple-list n))))

(sum-triple-equal-s 10 5)

(define (ordered-triples-sum n s) 
  (filter (lambda (lst) (= (accumulate + 0 lst) s)) 
	  (flatmap 
	   (lambda (i) 
	     (flatmap (lambda (j) 
			(map (lambda (k) (list i j k)) 
			     (enumerate-interval 1 (- j 1)))) 
		      (enumerate-interval 1 (- i 1)))) 
	   (enumerate-interval 1 n)))) 

(ordered-triples-sum 10 15)

(flatmap (lambda (j) 
	   (map (lambda (k) (list j k)) 
		(enumerate-interval 1 (- j 1)))) 
	 (enumerate-interval 1 3)) 

(define (unique-pairs n) 
  (flatmap (lambda (i)  
	     (map (lambda (j) (list i j)) 
		  (enumerate-interval 1 (- i 1)))) 
	   (enumerate-interval 1 n))) 

(unique-pairs 5)

(flatmap (lambda (x) x)
	 (enumerate-interval 1 3))

(map (lambda (k)
       (map (lambda (i) 
	      (map (lambda (j) (list k i j)) 
		   (enumerate-interval 1 (- i 1))))
	    (enumerate-interval 1 (- k 1))))
     (enumerate-interval 1 4))

(unique-pairs 4)

(append (list 2) (list 3))













